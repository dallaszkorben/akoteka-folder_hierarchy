WEBVTT

1
00:00:00.031 --> 00:00:02.633
[MUSIC]

2
00:00:02.633 --> 00:00:11.062
[SOUND].

3
00:00:11.062 --> 00:00:15.589
So we talked about the ethernet shield,
and now we'll talk about a WiFi shield.

4
00:00:15.589 --> 00:00:20.139
Actually it's relatively similar, I mean
what it does at a high level is basically

5
00:00:20.139 --> 00:00:22.340
the same thing as a ethernet shield.

6
00:00:22.340 --> 00:00:26.340
It allows you to connect to the internet,
but it does it through a wireless

7
00:00:26.340 --> 00:00:30.790
interface, rather than a wired interface
like an ethernet shield would do.

8
00:00:30.790 --> 00:00:35.100
So in a lot of ways it's very similar
from a programmer's point of view.

9
00:00:35.100 --> 00:00:39.750
Sending data on one shield versus sending
on another is a very similar operation.

10
00:00:39.750 --> 00:00:41.699
Now there are some differences,
and we'll talk about those.

11
00:00:44.440 --> 00:00:50.120
The IEEE standard uses is 802.11
There are varieties of this,

12
00:00:50.120 --> 00:00:53.852
V, there are suffixes, N, I can't
remember which one they're on now, but

13
00:00:53.852 --> 00:00:56.080
802.11 something is
the current WiFi standard.

14
00:00:57.730 --> 00:01:01.010
So, the library is similar to the Ethernet
library, not exactly the same.

15
00:01:02.520 --> 00:01:06.035
WiFi Initialization, so
what do you do first?

16
00:01:06.035 --> 00:01:07.970
Wifi.begin so that's very common.

17
00:01:07.970 --> 00:01:11.861
No arguments, if you pass no arguments
it just initializes the shield, so

18
00:01:11.861 --> 00:01:13.880
that's one way to call Wifi.begin.

19
00:01:13.880 --> 00:01:18.955
Just no arguments, it powers up
the shield and initializes it.

20
00:01:18.955 --> 00:01:25.140
Now, a common way to do it is to call
WiFi.begin with one argument, ssid.

21
00:01:25.140 --> 00:01:28.060
SSID is the name of the network
that you wanna connect to.

22
00:01:28.060 --> 00:01:31.620
Now this is something you don't
generally have with an ethernet shield.

23
00:01:31.620 --> 00:01:34.350
You don't have a choice of networks to
connect to, you've just got a network,

24
00:01:34.350 --> 00:01:35.990
and you connect to it.

25
00:01:35.990 --> 00:01:40.720
With WiFi you often can view many
networks, so you gotta pick one and

26
00:01:40.720 --> 00:01:42.490
SSID is the name of that network.

27
00:01:42.490 --> 00:01:45.383
You pass that as an argument,it'll
connect to that network.

28
00:01:45.383 --> 00:01:49.570
[COUGH] Now, you can also call
WiFi.begin with two arguments.

29
00:01:49.570 --> 00:01:53.140
The first argument is the SSID,
the second argument is the password.

30
00:01:53.140 --> 00:02:01.210
You would use this if the network had WPA2
encryption and it required a password,

31
00:02:01.210 --> 00:02:04.180
so you pass the password as an argument
to that you could connect to the network.

32
00:02:05.250 --> 00:02:09.930
Now another way to do it is to call
WiFi.begin with three arguments,

33
00:02:09.930 --> 00:02:12.290
the SSID, and then a key index, and a key.

34
00:02:12.290 --> 00:02:18.520
So this is used when the network uses WEP
encryption, and when it does that, WEP

35
00:02:18.520 --> 00:02:22.880
encryption has several keys, you can have
up to four different keys to choose from.

36
00:02:22.880 --> 00:02:25.990
So key index is going to be the number
of the key that you are choosing.

37
00:02:25.990 --> 00:02:28.860
And the key is going to effectively be
the password that you are using to get

38
00:02:28.860 --> 00:02:30.130
into the network.

39
00:02:30.130 --> 00:02:33.939
So all four of these options are different
ways that you can set up your connection,

40
00:02:34.980 --> 00:02:37.880
depending on the type of
network that you're using.

41
00:02:37.880 --> 00:02:43.230
Now [COUGH] so once you've connected,
[COUGH] once you've joined the network,

42
00:02:43.230 --> 00:02:47.910
then a lot of this part about you acting
as a client and a server is very similar

43
00:02:47.910 --> 00:02:54.250
to the Ethernet shield, so instead of an
Ethernet client, you've got a WiFiClient.

44
00:02:54.250 --> 00:02:58.720
So you create a WiFiClient if
you're acting as the client and

45
00:02:58.720 --> 00:02:59.570
you client connect.

46
00:02:59.570 --> 00:03:03.020
So you call client connect, client.connect
with that IP address and a port.

47
00:03:03.020 --> 00:03:04.934
This is actually the same as
with the Ethernet client.

48
00:03:04.934 --> 00:03:08.933
And client.stop stops communication.

49
00:03:08.933 --> 00:03:12.680
Now WiFiServer it invokes
slightly differently.

50
00:03:12.680 --> 00:03:17.260
When you want to access the server
you call server with port,

51
00:03:17.260 --> 00:03:19.400
it's phrased a little bit differently.

52
00:03:19.400 --> 00:03:23.430
Before with the Ethernet we said server
equals our Ethernet server port, but

53
00:03:23.430 --> 00:03:25.630
it accomplishes the same goal.

54
00:03:26.700 --> 00:03:30.520
And then you call server.begin to start
the server listening on the port,

55
00:03:30.520 --> 00:03:35.250
actually that's the same as
with the Ethernet library too.

56
00:03:35.250 --> 00:03:36.700
Now scanning for WiFi networks.

57
00:03:36.700 --> 00:03:40.740
This is something you don't generally do
with Ethernet, you're not scanning for

58
00:03:40.740 --> 00:03:41.590
Ethernet networks.

59
00:03:41.590 --> 00:03:43.880
You're plugged into a network and
that's that.

60
00:03:43.880 --> 00:03:46.360
With WiFi, you often want to scan,

61
00:03:46.360 --> 00:03:51.180
look at the networks around you,
and pick one to connect to.

62
00:03:51.180 --> 00:03:56.000
Sort of answering the question
which SSID should I connect to?

63
00:03:57.110 --> 00:04:00.180
So one thing is you're gonna
wanna scan for networks.

64
00:04:00.180 --> 00:04:02.470
It's very common to scan for

65
00:04:02.470 --> 00:04:06.890
networks so they they provide a function,
WiFi.scanNetworks.

66
00:04:06.890 --> 00:04:08.860
That returns the number
of networks available.

67
00:04:08.860 --> 00:04:10.890
It doesn't return the names of networks,
just the number.

68
00:04:10.890 --> 00:04:15.077
You know, if it found five
networks it returns a five.

69
00:04:15.077 --> 00:04:18.920
Now, if you wanna find, let's say you
know there are five networks, and

70
00:04:18.920 --> 00:04:21.140
you wanna find the actual
names of the networks,

71
00:04:21.140 --> 00:04:25.060
the SSIDs of the networks,
you can call this function WiFi.SSID.

72
00:04:25.060 --> 00:04:30.960
You pass it an integer i, and
it returns the SSID of the ith network.

73
00:04:30.960 --> 00:04:34.780
So if you know there are five networks,
you can call SSID of 0, 1,

74
00:04:34.780 --> 00:04:39.000
2, 3, and it will return
the SSID of all those networks.

75
00:04:40.630 --> 00:04:44.730
Now, often in order to pick
the network that you want, you go for

76
00:04:44.730 --> 00:04:48.340
highest strength, or
it's a common consideration.

77
00:04:48.340 --> 00:04:52.490
So you can also find out the strength
of a network by calling RSSI.

78
00:04:52.490 --> 00:04:56.311
So if you call WiFi.RSSI, you give it
an i, which is the number of the network,

79
00:04:56.311 --> 00:04:58.440
it will return the signal
strength of the network.

80
00:04:58.440 --> 00:05:01.370
It would return you
a number between -80 to 0,

81
00:05:01.370 --> 00:05:03.940
0 being the highest strength,
and -80 the lowest strength.

82
00:05:05.710 --> 00:05:08.630
And one more thing that's a factor
in figuring out what network

83
00:05:08.630 --> 00:05:11.230
you wanna connect to,
is the type of encryption you use,

84
00:05:11.230 --> 00:05:13.850
maybe you're looking for
an open network, something like that.

85
00:05:13.850 --> 00:05:17.370
So there's this function encryptionType,
WiFi.encryptionType.

86
00:05:17.370 --> 00:05:19.960
You give it an i which is
the number of the network and

87
00:05:19.960 --> 00:05:22.540
it returns the type of
encryption used in the network.

88
00:05:22.540 --> 00:05:25.900
It returns a code, 0, 1, 2, 3, 4,
depending on the type of encryption,

89
00:05:25.900 --> 00:05:29.790
so zero I think is WEP encryption.

90
00:05:29.790 --> 00:05:32.343
Oops.
Zero is for WEP, one is for WPA,

91
00:05:32.343 --> 00:05:36.908
two is for WPA2, and three is for
no encryption, and then four is for

92
00:05:36.908 --> 00:05:39.146
multiple possible encryption.

93
00:05:39.146 --> 00:05:40.926
Thank you.

94
00:05:40.926 --> 00:05:45.538
[MUSIC]