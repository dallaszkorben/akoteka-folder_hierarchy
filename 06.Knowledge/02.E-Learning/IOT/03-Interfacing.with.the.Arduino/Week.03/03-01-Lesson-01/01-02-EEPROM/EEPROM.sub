WEBVTT

1
00:00:01.610 --> 00:00:05.300
So we're going to talk
about how to use an EEPROM,

2
00:00:05.300 --> 00:00:08.660
how to write to it,
how to read from it, in Arduino.

3
00:00:08.660 --> 00:00:15.848
So there's an EEPROM library and you
include it at the top #include EEPROM.h.

4
00:00:15.848 --> 00:00:19.060
And here's just a very simple
program that's going to write some

5
00:00:19.060 --> 00:00:21.920
data to the EEPROM and
read from the EEPROM.

6
00:00:21.920 --> 00:00:23.527
So EEPROM, just a reminder,

7
00:00:23.527 --> 00:00:27.610
stands for Electrically Erasable
Programmable Read Only Memory and

8
00:00:27.610 --> 00:00:29.060
you can write to it and read from it.

9
00:00:29.060 --> 00:00:35.110
Now it's very small, it's very little
EEPROM in your, it's like flash, okay?

10
00:00:35.110 --> 00:00:35.630
It's like flash.

11
00:00:35.630 --> 00:00:38.380
So it's non-volatile, and
it's very small, though.

12
00:00:38.380 --> 00:00:40.170
It's got addresses.

13
00:00:40.170 --> 00:00:41.730
Well, it depends on the device.

14
00:00:41.730 --> 00:00:46.300
But in an Arduino,
there's 1K of it, 1K bytes.

15
00:00:46.300 --> 00:00:51.620
So that means the addresses
go from 0 to 1023.

16
00:00:51.620 --> 00:00:52.520
So that's all you've got.

17
00:00:53.998 --> 00:00:56.950
And rather than describe this whole
program first, I just want to

18
00:00:56.950 --> 00:00:59.915
zero in those highlighted functions there,
and it's pretty straightforward, really.

19
00:00:59.915 --> 00:01:03.510
EEPROM.write, that's going to
write a byte into memory.

20
00:01:03.510 --> 00:01:06.860
And EEPROM.read,
that's going to read a byte from memory.

21
00:01:06.860 --> 00:01:09.250
So just looking at the EEPROM.write,
though,

22
00:01:09.250 --> 00:01:12.080
the first one highlighted in red,
it takes two arguments.

23
00:01:12.080 --> 00:01:16.090
The first argument is the address, addr,
the address you want to write it to.

24
00:01:16.090 --> 00:01:19.541
That for our Arduino Uno,
that's got to be a number from 0 to 1023,

25
00:01:19.541 --> 00:01:22.560
because those are the addresses
that you have.

26
00:01:22.560 --> 00:01:25.034
And then the data,
the second argument, that's a byte,

27
00:01:25.034 --> 00:01:28.740
that's going to be the data that you
want to write into that address.

28
00:01:28.740 --> 00:01:31.860
Now one thing to know here, see that data.

29
00:01:31.860 --> 00:01:36.330
If you look up a few lines right after the
top of the setup, void setup, next line.

30
00:01:36.330 --> 00:01:39.450
I declare data as an integer.

31
00:01:39.450 --> 00:01:41.340
And I set it equal to 1.

32
00:01:41.340 --> 00:01:46.510
Now integer in this platform, in the
Arduino platform, is 2 bytes long, okay?

33
00:01:46.510 --> 00:01:48.302
So it looks like there's a problem there,
right?

34
00:01:48.302 --> 00:01:53.350
Because EEPROM.write is going to
write only one byte into the address.

35
00:01:53.350 --> 00:01:54.210
So what does it do?

36
00:01:54.210 --> 00:01:59.110
When it has got this date that's two bytes
long and it can only write one byte,

37
00:01:59.110 --> 00:02:02.500
what it does it chops off,
it ignores the high byte.

38
00:02:02.500 --> 00:02:05.030
So if you type EEPROM.write address,
data and

39
00:02:05.030 --> 00:02:09.090
data is two bytes long, it's really going
to take the low least significant byte and

40
00:02:09.090 --> 00:02:11.120
write that and ignore the high byte.

41
00:02:11.120 --> 00:02:15.670
Which is fine since the data is equal to
1, the high byte is all zeroes anyway.

42
00:02:15.670 --> 00:02:17.450
So it's fine in this case.

43
00:02:17.450 --> 00:02:18.970
But just understand that
that's what happens.

44
00:02:18.970 --> 00:02:22.250
When you try to do a write, it's only
going to write one byte, it's going to

45
00:02:22.250 --> 00:02:25.198
write the least significant byte and
it's going to ignore all the higher bytes.

46
00:02:25.198 --> 00:02:27.870
So that's EEPROM.write.

47
00:02:27.870 --> 00:02:31.330
Then if we look at the second line,
the second highlighted line, the red one.

48
00:02:31.330 --> 00:02:36.690
EEPROM.read really that just takes
one argument, which is the address.

49
00:02:36.690 --> 00:02:41.750
And it returns a value, which is
the byte that is stored at that address.

50
00:02:41.750 --> 00:02:45.080
So notice that EEPROM.write,
it doesn't return in any value,

51
00:02:45.080 --> 00:02:47.840
it just writes something to the memory and
doesn't return a value.

52
00:02:47.840 --> 00:02:49.940
EEPROM.read returns a value,

53
00:02:49.940 --> 00:02:53.980
which is the byte stored at that address
which is the argument of the function.

54
00:02:53.980 --> 00:02:56.800
So, those are the main two
things I wanted you to see.

55
00:02:56.800 --> 00:02:59.990
Just to talk about what this program does,
really simple.

56
00:02:59.990 --> 00:03:02.260
It starts out and it.

57
00:03:02.260 --> 00:03:04.530
So if you look at the top of the setup.

58
00:03:04.530 --> 00:03:07.240
Actually, it's very beginning
I include the library.

59
00:03:07.240 --> 00:03:08.980
Then, void setup.

60
00:03:08.980 --> 00:03:11.910
Then, inside the setup I declared
the variables, so I have address and

61
00:03:11.910 --> 00:03:14.250
I have data and I set data equal to 1.

62
00:03:14.250 --> 00:03:15.170
Because that's the only data.

63
00:03:15.170 --> 00:03:19.820
I'm going to write only ones into this
memory because this is a simple program.

64
00:03:19.820 --> 00:03:23.390
Then I set up the serial communications,
serial.begin (9600).

65
00:03:23.390 --> 00:03:27.120
That's because I want to print
out the results on the screen,

66
00:03:27.120 --> 00:03:29.830
on the laptop in the serial monitor.

67
00:03:29.830 --> 00:03:32.070
So I need to set up
the serial communication.

68
00:03:32.070 --> 00:03:32.945
So I do that.

69
00:03:32.945 --> 00:03:36.342
And then I've got two for
loops, and both these for

70
00:03:36.342 --> 00:03:42.440
loops they start address equals 0 up to
address equals less than 1024, address ++.

71
00:03:42.440 --> 00:03:46.696
So they're going trough all
the addresses in the memory, 0 to 1023.

72
00:03:46.696 --> 00:03:50.627
The first loop just writes to
each address, and writes data,

73
00:03:50.627 --> 00:03:54.498
data which is equal to 1, so
it writes a 1 to every address.

74
00:03:54.498 --> 00:03:58.730
Now then, the second loop does just read.

75
00:03:58.730 --> 00:04:01.400
It calls that EEPROM.read and prints that.

76
00:04:01.400 --> 00:04:03.480
So Serial.print, and what's it printing?

77
00:04:03.480 --> 00:04:05.310
It's printing EEPROM.read.

78
00:04:05.310 --> 00:04:09.200
So it prints out all of the addresses,
which should just be a series of ones.

79
00:04:09.200 --> 00:04:13.420
And note that the serial.print, the second
argument, so it takes two arguments.

80
00:04:13.420 --> 00:04:15.140
One argument is the thing
that we want to print.

81
00:04:15.140 --> 00:04:19.390
The second argument, in this case,
is DEC, that stands for decimal.

82
00:04:19.390 --> 00:04:22.920
Telling us that these numbers that we're
printing we want them to appear in decimal

83
00:04:22.920 --> 00:04:25.437
format, base 10.

84
00:04:25.437 --> 00:04:29.565
Now actually in fact, it doesn't really
matter because a one is a one is a one no

85
00:04:29.565 --> 00:04:31.305
matter what base you put it in.

86
00:04:31.305 --> 00:04:33.439
You can put it in hex
it will still be a one.

87
00:04:33.439 --> 00:04:37.100
But DEC,
I use that just to show you how to use it.

88
00:04:37.100 --> 00:04:39.210
But this is a very simple function.

89
00:04:39.210 --> 00:04:42.080
But this gives you the idea
how you write from the EEPROM,

90
00:04:42.080 --> 00:04:43.340
how you read from the EEPROM.

91
00:04:43.340 --> 00:04:46.220
And just remember that you're
limited to the size of the EEPROM,

92
00:04:46.220 --> 00:04:50.290
meaning the number of memory addresses,
like on an Uno, is going to be 0 to 1023,

93
00:04:50.290 --> 00:04:52.290
those are the addresses.

94
00:04:52.290 --> 00:04:57.670
Other Arduino devices can have more or
less EEPROM depending on the device,

95
00:04:57.670 --> 00:05:00.460
and you'd have to look that up, depending
on the device that you purchased.

96
00:05:02.380 --> 00:05:06.202
Now, what we just showed was how
you write one byte at the time,

97
00:05:06.202 --> 00:05:08.550
read one byte at the time.

98
00:05:08.550 --> 00:05:13.455
But, is often the case, or sometimes
the case, that you want to write multiple

99
00:05:13.455 --> 00:05:17.340
bytes or read multiple bytes, you want to
deal with more than one byte at the time.

100
00:05:17.340 --> 00:05:20.700
And this is in the context of
EEPROM writing and reading.

101
00:05:20.700 --> 00:05:25.620
But just in general, you have some number
that is multiple by this long, but

102
00:05:25.620 --> 00:05:28.290
you want to deal with
only one byte at a time.

103
00:05:28.290 --> 00:05:31.150
Or really, more generally,
you got some big number and

104
00:05:31.150 --> 00:05:33.010
you want to deal with
only subset of the bit.

105
00:05:33.010 --> 00:05:36.090
So you got a 16 bit
number like an integer.

106
00:05:36.090 --> 00:05:39.090
And you want to look at the low bits,
something like that, you want to do

107
00:05:39.090 --> 00:05:42.750
arithmetic with the low bits, you want to
write the low bits or something, okay?

108
00:05:42.750 --> 00:05:46.760
But it often happens in a programming,
and IoT device programming,

109
00:05:46.760 --> 00:05:51.060
that you want to focus on a subset of
the bits in an entire piece of data.

110
00:05:52.200 --> 00:05:55.680
So, you can only write one byte
at a time to an EEPROM, but

111
00:05:55.680 --> 00:06:00.100
let's say you want to write an integer,
and an integer is 2 bytes long.

112
00:06:00.100 --> 00:06:01.880
So what you going to do?

113
00:06:01.880 --> 00:06:04.480
So what you going to do,
is you going to write one byte at a time.

114
00:06:04.480 --> 00:06:07.490
First the low then high,
which have order, right?

115
00:06:07.490 --> 00:06:10.580
But you have to be able to
focus on the low bytes, and

116
00:06:10.580 --> 00:06:13.300
then focus on the high bytes separately,
okay?

117
00:06:13.300 --> 00:06:17.210
So, I'm going to show you the sort of
a generic way to do that using masking.

118
00:06:18.570 --> 00:06:22.280
So, use masking to focus
on a single byte at a time.

119
00:06:22.280 --> 00:06:27.140
Or really more generally, use masking
to focus on a subset of the bits.

120
00:06:27.140 --> 00:06:30.150
Which often maybe it's just one byte,
but in this example,

121
00:06:30.150 --> 00:06:31.460
I'm just focusing on one byte.

122
00:06:31.460 --> 00:06:33.660
The high byte or
the low byte of the integer.

123
00:06:33.660 --> 00:06:36.670
But really with masking you could
focus on any subset of bits.

124
00:06:38.670 --> 00:06:42.910
Okay, so there are variations on masking,
but I'll show you one right here.

125
00:06:42.910 --> 00:06:46.060
So, example, since I don't want to
show a 16 bit number here.

126
00:06:46.060 --> 00:06:49.780
I'm going to say, look, say,
I've got a four bit number but

127
00:06:49.780 --> 00:06:53.140
I'm only interested in two of
the bits in that four bit number.

128
00:06:53.140 --> 00:06:57.240
So how am I going to focus on just two
of the bits in the four bit number?

129
00:06:57.240 --> 00:07:02.750
I'm going to make a mask that
highlights these two bits, okay?

130
00:07:02.750 --> 00:07:06.990
So, on the top I got my number,
0101, it's a four bit number.

131
00:07:06.990 --> 00:07:10.528
But I'm only interested
in the high two bits.

132
00:07:10.528 --> 00:07:13.925
So I make a mask, and
you see that below, 1100.

133
00:07:13.925 --> 00:07:18.051
And the idea behind the mask is, it has
ones in the bit positions that you're

134
00:07:18.051 --> 00:07:21.760
interested in and zeros in the bits
that you're not interested in.

135
00:07:21.760 --> 00:07:24.570
So, since the mask is 1100,

136
00:07:24.570 --> 00:07:29.570
I know I'm only interested in the high 2
bits, and the low 2 bits I can ignore.

137
00:07:29.570 --> 00:07:32.920
So that is the general idea of a mask,
okay?

138
00:07:32.920 --> 00:07:34.230
And in the next lecture,

139
00:07:34.230 --> 00:07:38.368
I'll tell you how to use a mask
to screen out bits and so on.

140
00:07:38.368 --> 00:07:40.361
Thank you.

141
00:07:40.361 --> 00:07:45.433
[MUSIC]