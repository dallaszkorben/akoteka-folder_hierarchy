WEBVTT

1
00:00:00.000 --> 00:00:07.310
[MUSIC]

2
00:00:11.629 --> 00:00:14.860
So in this lecture, we'll look at
system level design decisions.

3
00:00:14.860 --> 00:00:18.510
We'll go through a couple of
example system level systems that

4
00:00:18.510 --> 00:00:20.770
I've worked on in the past.

5
00:00:20.770 --> 00:00:22.830
And we'll look at the different design
decisions that you can make, so

6
00:00:22.830 --> 00:00:24.460
you can get a feel for

7
00:00:24.460 --> 00:00:28.040
what type of decisions you could
have to make at the system level.

8
00:00:29.450 --> 00:00:30.974
So, Packet Sniffer Example.

9
00:00:30.974 --> 00:00:32.474
So, okay, so what this is,

10
00:00:32.474 --> 00:00:35.730
this is something that some
students of mine made a while ago.

11
00:00:36.960 --> 00:00:40.390
The job was to make a packet sniffer,

12
00:00:40.390 --> 00:00:43.540
sort of a hardware packet sniffer
that was small and inobtrusive.

13
00:00:43.540 --> 00:00:47.330
So I have a friend who does pen test,
penetration testing.

14
00:00:47.330 --> 00:00:50.310
Penetration testing, basically what
happens is he's hired by companies

15
00:00:50.310 --> 00:00:52.490
to essentially attack their systems.

16
00:00:52.490 --> 00:00:56.740
And he's hired, so he signs a contract
says he can do it, he attacks the systems

17
00:00:56.740 --> 00:01:00.820
in different ways and then he writes up
a report on all the flaws of their systems

18
00:01:00.820 --> 00:01:04.090
and gives it to them and then they
can fix the flaws with their systems.

19
00:01:04.090 --> 00:01:06.900
So he tries to attack their systems,
physical attacks,

20
00:01:06.900 --> 00:01:09.890
electronic attacks, things like this.

21
00:01:09.890 --> 00:01:14.430
So one thing he said to me was look, he
would like to be able to steal data off of

22
00:01:14.430 --> 00:01:17.030
a company's network in
an inobtrusive manner, okay?

23
00:01:18.080 --> 00:01:19.929
So the idea was to make a packet sniffer.

24
00:01:19.929 --> 00:01:23.520
A packet sniffer basically just reads
all the packets on the network, right?

25
00:01:23.520 --> 00:01:25.601
So he wanted to do it
in a physical network.

26
00:01:25.601 --> 00:01:27.120
You could also do it with Wi-Fi.

27
00:01:27.120 --> 00:01:31.000
But say you go into a bank,
say he's hired to look at a bank, right.

28
00:01:31.000 --> 00:01:35.260
You go into a bank, in their office they
have an Ethernet jack in the wall, so

29
00:01:35.260 --> 00:01:38.100
if you could stick something in that
Ethernet jack to just read all the network

30
00:01:38.100 --> 00:01:40.140
traffic on that Ethernet jack.

31
00:01:40.140 --> 00:01:43.862
And then, what you'd want is for
it to take, read the packets, and then

32
00:01:43.862 --> 00:01:48.258
exfiltrate them, so meaning send them to
a remote site, so that somebody remotely,

33
00:01:48.258 --> 00:01:52.370
meaning my friend the pen tester, can
have a record of all the network traffic.

34
00:01:53.370 --> 00:01:54.360
So that's what he wanted.

35
00:01:54.360 --> 00:01:57.555
And this device had to be small and
not use too much power,

36
00:01:57.555 --> 00:02:01.630
because it has to last for a while so
you can read lots of traffic and so on.

37
00:02:01.630 --> 00:02:03.630
Small so people don't notice it, right?

38
00:02:03.630 --> 00:02:05.028
Who's going to necessarily
notice something,

39
00:02:05.028 --> 00:02:06.221
maybe it's behind somebody's desk.

40
00:02:06.221 --> 00:02:09.960
He just sticks it in there,
nobody notices it, should be inobtrusive.

41
00:02:09.960 --> 00:02:12.746
And, of course,
you want it to be as cheap as you can get.

42
00:02:12.746 --> 00:02:14.789
Okay, so ways to do this.

43
00:02:14.789 --> 00:02:17.831
So there are three ways I'm
outlining here to do it.

44
00:02:17.831 --> 00:02:21.502
Option 1 is to just use a laptop
plus a packet sniffer, right,

45
00:02:21.502 --> 00:02:24.092
a packet sniffer software, so Wireshark.

46
00:02:24.092 --> 00:02:28.430
Okay, we've actually covered Wireshark
earlier in the specialization.

47
00:02:28.430 --> 00:02:30.370
Wireshark will do this job.

48
00:02:30.370 --> 00:02:34.680
So you can just get a laptop, run
Wireshark online, plug the laptop straight

49
00:02:34.680 --> 00:02:38.690
into the jack and leave it there,
and it would do the job, okay?

50
00:02:38.690 --> 00:02:43.674
Now, cost is expensive, it's whatever
the cost of a laptop is, so say $500, but

51
00:02:43.674 --> 00:02:45.450
depends on the cost.

52
00:02:45.450 --> 00:02:47.717
Size is pretty large.

53
00:02:47.717 --> 00:02:51.580
And difficulty is easy, actually it's
very easy to implement this, right.

54
00:02:51.580 --> 00:02:54.850
So it wouldn't take you much time to
do such a thing, because you could just

55
00:02:54.850 --> 00:02:59.070
get Wireshark installed on the laptop and
then you're done and plug it in, easy.

56
00:02:59.070 --> 00:03:01.860
Now, another option is
to use Pwnie Express,

57
00:03:01.860 --> 00:03:04.880
now Pwnie Express is a small Linux
platform that looks like that.

58
00:03:04.880 --> 00:03:06.220
It looks just like a plug, okay?

59
00:03:07.510 --> 00:03:09.310
And it's made to look like a plug.

60
00:03:09.310 --> 00:03:12.020
And you stick it, you just take it and
stick it in the wall, and

61
00:03:12.020 --> 00:03:13.420
that thing is very inobtrusive.

62
00:03:13.420 --> 00:03:14.600
It looks like a plug.

63
00:03:14.600 --> 00:03:15.730
Nobody would notice it.

64
00:03:15.730 --> 00:03:20.310
See, that's a problem with the laptop, the
thing is big and ugly, not ugly, big and

65
00:03:20.310 --> 00:03:21.260
obvious, right.

66
00:03:21.260 --> 00:03:25.362
So somebody might notice a laptop lying
around in their office space, but

67
00:03:25.362 --> 00:03:29.596
if you see a plug that plugs into a wall,
nobody will notice that, right, so

68
00:03:29.596 --> 00:03:31.006
that's Pwnie Express.

69
00:03:31.006 --> 00:03:33.814
And it's difficulty is medium.

70
00:03:33.814 --> 00:03:37.811
It's harder than, because you don't
just install Wireshark, you have to use,

71
00:03:37.811 --> 00:03:40.550
it has a variance of
Linux operating system.

72
00:03:40.550 --> 00:03:44.768
And it's a little bit harder
than a laptop, than Option 1.

73
00:03:44.768 --> 00:03:46.300
But it costs less, though.

74
00:03:46.300 --> 00:03:47.230
It also costs less.

75
00:03:47.230 --> 00:03:50.660
380 was how much it was costing at
the time when I analyzed this, but

76
00:03:50.660 --> 00:03:53.180
it's inobtrusive, so
it has that good feature.

77
00:03:54.460 --> 00:03:56.775
Now, another option, the option
that my students eventually did,

78
00:03:56.775 --> 00:04:01.240
was to make a hardware packet sniffer,
a special purpose hardware packet sniffer.

79
00:04:01.240 --> 00:04:07.930
So a device where its sole job in life is
to sniff packets and send them, right.

80
00:04:07.930 --> 00:04:11.743
So actually, if we look at these different
options, the first option, Option 1 uses

81
00:04:11.743 --> 00:04:15.053
a laptop, which is really a general
purpose machine, could do anything.

82
00:04:15.053 --> 00:04:17.491
Option 2, Pwnie Express,
it's a Linux platform,

83
00:04:17.491 --> 00:04:19.840
you can also run general
purpose software on that.

84
00:04:19.840 --> 00:04:24.220
But Option 3 is just dedicated to
doing one thing, exactly one thing.

85
00:04:24.220 --> 00:04:26.870
So when they built this,
small and cheap, right?

86
00:04:26.870 --> 00:04:30.910
Extremely small, actually this is
the smallest option because all it is you

87
00:04:30.910 --> 00:04:33.550
can see it's hard, I should've
put a quarter next to the thing.

88
00:04:33.550 --> 00:04:37.786
All it is, is an Ethernet jack plus a
chip, right, and on the back is a battery,

89
00:04:37.786 --> 00:04:39.577
right, really, really small.

90
00:04:39.577 --> 00:04:44.070
So the cost is like $40 to make
this whole thing, one-off anyway.

91
00:04:44.070 --> 00:04:47.630
If we did a mass produce it,
it'd be cheaper but one-off was $40.

92
00:04:47.630 --> 00:04:48.720
But the difficulty was hard.

93
00:04:48.720 --> 00:04:51.370
It was hard because they
had to really understand,

94
00:04:51.370 --> 00:04:54.300
if you look at that Ethernet jack,
you can't see it too well, but

95
00:04:54.300 --> 00:04:57.180
there's a chip on there, an Ethernet
controller chip, and they had to

96
00:04:57.180 --> 00:05:00.710
understand that Ethernet controller
chip and interface with the processor.

97
00:05:00.710 --> 00:05:03.860
Actually, the processor on there
is I think the same one that you'd

98
00:05:03.860 --> 00:05:05.620
find on an Arduino.

99
00:05:05.620 --> 00:05:07.970
They just took the processor and
used that.

100
00:05:07.970 --> 00:05:09.750
But it's very small and

101
00:05:09.750 --> 00:05:13.990
light and hard to, if you put this in
a box it would be hard to see, and so on.

102
00:05:13.990 --> 00:05:16.110
So [COUGH] that, and it's cheap.

103
00:05:16.110 --> 00:05:18.420
A lot cheaper than say the Pwnie Express.

104
00:05:18.420 --> 00:05:19.409
So those are the three options.

105
00:05:19.409 --> 00:05:21.560
Now, there are other options
that one could envision.

106
00:05:21.560 --> 00:05:24.420
In fact, back then Raspberry Pi,
when I did this I don't think Raspberry Pi

107
00:05:24.420 --> 00:05:27.090
was really popular, I think it existed but
it wasn't too popular.

108
00:05:27.090 --> 00:05:31.420
But you can use, there are newer devices,
like if you use the Raspberry Pi Zero,

109
00:05:31.420 --> 00:05:34.795
right, that thing,
that's probably a better option.

110
00:05:34.795 --> 00:05:36.670
Well, it doesn't have an Ethernet jack.

111
00:05:36.670 --> 00:05:38.610
Anyway, these are three possible options,
but

112
00:05:38.610 --> 00:05:40.250
you can see how there's a trade off space.

113
00:05:40.250 --> 00:05:43.670
Cost, size, and
difficulty of doing the job, right.

114
00:05:43.670 --> 00:05:45.200
So this is the type of
thing I want to see.

115
00:05:45.200 --> 00:05:47.340
Some sort of evaluation
of different options.

116
00:05:47.340 --> 00:05:49.290
So you can say,
this is the one I want to pick.

117
00:05:49.290 --> 00:05:50.044
Like, for instance,

118
00:05:50.044 --> 00:05:52.314
you might not want to pick Option
3 because the difficulty was hard.

119
00:05:52.314 --> 00:05:55.210
It would take you a long time to do that,
so don't do that, right.

120
00:05:55.210 --> 00:05:57.870
Maybe you go for Option 2 because
it's medium difficulty and

121
00:05:57.870 --> 00:06:00.970
you can do it in the time required,
things like this.

122
00:06:00.970 --> 00:06:05.696
So this is the type of evaluation
I want to see when you're showing

123
00:06:05.696 --> 00:06:08.329
your system level design options.

124
00:06:08.329 --> 00:06:11.764
Okay, so key decisions that you
commonly make at the system level.

125
00:06:11.764 --> 00:06:13.471
One, how will the behavior,

126
00:06:13.471 --> 00:06:18.118
which is described in the requirements
specification, how will the behavior be

127
00:06:18.118 --> 00:06:22.860
divided into components, okay, and
hardware/software components, right?

128
00:06:22.860 --> 00:06:25.420
So some components could be hardware,
some could be software.

129
00:06:25.420 --> 00:06:26.230
How we will divide it?

130
00:06:26.230 --> 00:06:28.576
So I'm going to say,
this functionality is done in hardware,

131
00:06:28.576 --> 00:06:29.914
this is done in software, right.

132
00:06:29.914 --> 00:06:35.347
So generally, as a rule, when you put
behavior into software it is easier for

133
00:06:35.347 --> 00:06:39.210
you, okay,
because then you just need to write code.

134
00:06:39.210 --> 00:06:42.280
If you say this behavior is going to be
dedicated to special purpose hardware

135
00:06:42.280 --> 00:06:46.230
then you have to design that hardware and
that's difficult.

136
00:06:46.230 --> 00:06:47.110
So generally,

137
00:06:47.110 --> 00:06:50.210
you're going to be making software
components not hardware components.

138
00:06:50.210 --> 00:06:52.990
Now, some components,
you have to make hardware, for

139
00:06:52.990 --> 00:06:55.550
instance, sensors and actuators,
those things are hardware, right.

140
00:06:55.550 --> 00:06:58.070
You can't make a software photo resistor,
right.

141
00:06:58.070 --> 00:06:59.970
So you're going to have sensors and

142
00:06:59.970 --> 00:07:02.130
actuators which are definitely
hardware components.

143
00:07:02.130 --> 00:07:04.460
And you're going to have a microprocessor,

144
00:07:04.460 --> 00:07:08.730
microcontroller like a Arduino Raspberry
Pi system which are definitely hardware.

145
00:07:08.730 --> 00:07:13.730
But, as generally, the rest will probably
be primarily software components for this.

146
00:07:13.730 --> 00:07:17.746
But notice it is possible to
use hardware components too and

147
00:07:17.746 --> 00:07:23.139
those can be more efficient and cheaper
and faster but they're hard to design.

148
00:07:23.139 --> 00:07:26.750
Okay, so will components be pre-fab or
built from scratch?

149
00:07:26.750 --> 00:07:28.530
So that's true for hardware and software.

150
00:07:28.530 --> 00:07:32.304
With hardware components that you're just
going to buy a board to do something or

151
00:07:32.304 --> 00:07:35.103
that's already pre-built and
just buy it off the shelf or

152
00:07:35.103 --> 00:07:37.970
are you going to design
that board from scratch?

153
00:07:37.970 --> 00:07:39.190
Same thing with software.

154
00:07:39.190 --> 00:07:41.790
Am I going to write an app to do this or

155
00:07:41.790 --> 00:07:43.290
am I just going to use
an app off the shelf?

156
00:07:44.400 --> 00:07:48.110
You are allowed to use prefabricated
prebuilt components, that's okay.

157
00:07:48.110 --> 00:07:50.730
You don't want everything to
be pre-fab because then your

158
00:07:50.730 --> 00:07:52.540
project isn't complex enough.

159
00:07:52.540 --> 00:07:56.000
But certain components, it may make sense
to take certain functionalities and

160
00:07:56.000 --> 00:07:57.130
just buy it.

161
00:07:57.130 --> 00:07:59.549
Now, the downside of
buying prefabricated and

162
00:07:59.549 --> 00:08:01.855
prebuilt components is
that they cost more.

163
00:08:01.855 --> 00:08:05.037
It's always going to cost you a certain
amount of money to buy something pre-built

164
00:08:05.037 --> 00:08:06.890
rather than building it yourself.

165
00:08:06.890 --> 00:08:11.527
So that's going to depend on your cost
constraints, how much money do you have?

166
00:08:11.527 --> 00:08:15.510
Now, another decision is,
do the component interfaces match?

167
00:08:15.510 --> 00:08:18.100
So say you make a system
with multiple components,

168
00:08:18.100 --> 00:08:20.230
these components are going to
be talking to each other.

169
00:08:20.230 --> 00:08:21.010
Do they match?

170
00:08:21.010 --> 00:08:22.430
Can they talk to each other?

171
00:08:22.430 --> 00:08:25.030
As an example,
let's say I buy a component,

172
00:08:25.030 --> 00:08:29.980
a camera which communicates
through I2C protocol, but

173
00:08:29.980 --> 00:08:35.080
I buy a microcontroller which doesn't know
I2C protocol, it only knows SPI protocol.

174
00:08:35.080 --> 00:08:36.710
Those two don't match, okay?

175
00:08:36.710 --> 00:08:37.850
So things like that,

176
00:08:37.850 --> 00:08:41.630
you want to make sure that their
interfaces communicate with each other.

177
00:08:41.630 --> 00:08:43.970
Also the number of pins matters, too.

178
00:08:43.970 --> 00:08:47.170
So do you have enough pins for
the interface?

179
00:08:47.170 --> 00:08:49.820
So the microcontroller,
it has a limited number of pins and

180
00:08:49.820 --> 00:08:51.700
if you interface it with
too many different devices,

181
00:08:51.700 --> 00:08:54.330
you won't have enough pins to even
communicate with the different devices.

182
00:08:54.330 --> 00:08:58.839
So you have to count that, have to
consider that as a system design decision.

183
00:09:00.550 --> 00:09:04.640
Example, my simple system example,
Target a Red Box.

184
00:09:04.640 --> 00:09:08.650
So I have a gun, I have a laser,
a laser pointer like this one, right.

185
00:09:08.650 --> 00:09:10.720
I want to point it at a red box.

186
00:09:10.720 --> 00:09:15.280
So the way I'm going to do this is I
have a camera, it's going to detect red.

187
00:09:15.280 --> 00:09:19.923
And the camera will be mounted with
the laser and they will be mounted on some

188
00:09:19.923 --> 00:09:24.787
servos and I'm going to move the servos
until that red is dead center in my image,

189
00:09:24.787 --> 00:09:28.273
and then I'll assume my
laser's pointing right at it.

190
00:09:28.273 --> 00:09:31.260
So that's my Target a Red Box system.

191
00:09:31.260 --> 00:09:34.386
So some decisions you might
have to make about that.

192
00:09:34.386 --> 00:09:37.648
You're going to have to have some code
that's going to detect the color red in

193
00:09:37.648 --> 00:09:40.275
an image, right,
to do it the way I just said.

194
00:09:40.275 --> 00:09:44.565
You're also going to have to have some
code to drive the servos, to point things.

195
00:09:44.565 --> 00:09:47.845
So you're going to have some red
detection code, that'll be one block.

196
00:09:47.845 --> 00:09:49.565
Some servo code, that's another block.

197
00:09:49.565 --> 00:09:51.404
Will they be running on
the same microcontroller?

198
00:09:52.710 --> 00:09:55.150
Now, they don't have to.

199
00:09:55.150 --> 00:09:56.530
In this case, they probably would.

200
00:09:56.530 --> 00:10:00.028
But maybe these things need
to be formed really quickly.

201
00:10:00.028 --> 00:10:02.956
Maybe there's a performance constraint,
and then maybe I want them on separate

202
00:10:02.956 --> 00:10:05.420
microcontrollers so that they
don't slow each other down, okay.

203
00:10:06.750 --> 00:10:10.860
Another decision, should the red detection
be done with an off-the-shelf component?

204
00:10:10.860 --> 00:10:15.430
So for instance, with red detection,
you have to scan an image and look for

205
00:10:15.430 --> 00:10:16.490
red, right.

206
00:10:16.490 --> 00:10:21.100
That, you could write the code from
scratch to go through the image, but then

207
00:10:21.100 --> 00:10:25.080
you gotta know about the image formats and
scan the image formats and it's a pain.

208
00:10:25.080 --> 00:10:26.534
But you can certainly do that.

209
00:10:26.534 --> 00:10:28.438
Or you can buy an off-the-shelf component.

210
00:10:28.438 --> 00:10:31.132
There's actually a camera we use for
this called PixieCam.

211
00:10:31.132 --> 00:10:32.940
You can buy this and it's a camera and

212
00:10:32.940 --> 00:10:35.830
it has a processor on it
that does color detection.

213
00:10:35.830 --> 00:10:40.380
And then, you can just take it and plug
it by, I think it's I2C, also USB, you

214
00:10:40.380 --> 00:10:44.790
can plug in to your other system and it'll
just tell you where the red is, right.

215
00:10:44.790 --> 00:10:46.928
So you can just buy
an off-the-shelf component.

216
00:10:46.928 --> 00:10:50.295
Now, the off-the-shelf component
costs you, I don't know, 70, 80,

217
00:10:50.295 --> 00:10:51.159
I can't remember.

218
00:10:51.159 --> 00:10:53.540
Or you could do it by yourself,
cheap, right.

219
00:10:53.540 --> 00:10:54.550
So it's up to you.

220
00:10:55.940 --> 00:10:56.570
Here's another one.

221
00:10:56.570 --> 00:10:59.090
Can the microcontroller interface
with the off-the-shelf component?

222
00:10:59.090 --> 00:11:02.475
So, for instance, let's say my
off-the-shelf component, my PixieCam,

223
00:11:02.475 --> 00:11:03.255
it speaks by USB.

224
00:11:03.255 --> 00:11:05.070
It does have USB connection.

225
00:11:05.070 --> 00:11:08.730
Let's say I buy a microcontroller
like an Arduino.

226
00:11:08.730 --> 00:11:12.460
Arduino doesn't have a USB input,
so am I in trouble?

227
00:11:12.460 --> 00:11:13.705
Maybe I can't use them together.

228
00:11:13.705 --> 00:11:17.469
Now, it turns out you can,
because we do actually.

229
00:11:17.469 --> 00:11:21.681
PixieCam has another port that
can be used by the Arduino, but

230
00:11:21.681 --> 00:11:26.948
you have to be aware of this, right,
they have to be compatible interfaces.

231
00:11:26.948 --> 00:11:30.966
Okay, [COUGH] here's another
design example, multicopter.

232
00:11:30.966 --> 00:11:33.868
So like the quadcopter we were building.

233
00:11:33.868 --> 00:11:38.094
So some decisions, some system
decisions you might want to make.

234
00:11:38.094 --> 00:11:40.798
The frame, every quadcopter or
multicopter has to have a frame,

235
00:11:40.798 --> 00:11:43.425
a physical frame that
you mount everything on.

236
00:11:43.425 --> 00:11:46.235
So is it pre-fab, prefabricated, or
are you going to do it yourself?

237
00:11:46.235 --> 00:11:47.645
Are you going to build the frame?

238
00:11:47.645 --> 00:11:50.051
My students, they want to design
a frame and fabricate the frame.

239
00:11:50.051 --> 00:11:51.537
And I tell them, no, forget it.

240
00:11:51.537 --> 00:11:54.742
Prefabricated frames are cheap and so
easy, you don't have to do anything.

241
00:11:54.742 --> 00:11:58.285
You just buy it, and then you have to
screw parts together, but it's easy.

242
00:11:58.285 --> 00:12:03.370
Rather than, see they just want to try
out using the fabrication facilities.

243
00:12:03.370 --> 00:12:07.240
They want to draw it in SOLIDWORKS and
then send it to a fab and all this.

244
00:12:07.240 --> 00:12:09.979
And that's nice, and
I know they want to try it, and

245
00:12:09.979 --> 00:12:13.695
they have done a little bit of that,
but it's not really necessary.

246
00:12:13.695 --> 00:12:18.338
Flight controller, prefabricated just
off-the-shelf flight controller.

247
00:12:18.338 --> 00:12:22.274
Flight controller's the processor in
the center of the whole thing that

248
00:12:22.274 --> 00:12:26.093
tells the motors what speed to go at and
receives data from the remote.

249
00:12:26.093 --> 00:12:28.710
Or are you going to write that
flight controller yourself?

250
00:12:28.710 --> 00:12:31.210
So you can take an Arduino and
write flight controller code on it, or

251
00:12:31.210 --> 00:12:33.740
you can just buy an off-the-shelf
flight controller.

252
00:12:33.740 --> 00:12:35.610
And we've chosen to buy
an off-the-shelf flight controller,

253
00:12:35.610 --> 00:12:37.619
because they have lots of features and
they're pretty cheap.

254
00:12:38.840 --> 00:12:39.850
How many motors?

255
00:12:39.850 --> 00:12:42.440
You want four motors, or
you want six motors, right?

256
00:12:42.440 --> 00:12:46.284
So this is going to depend on how much
you want to lift, which is something that

257
00:12:46.284 --> 00:12:49.639
would have to be specified in
the requirements specification.

258
00:12:49.639 --> 00:12:51.110
Which propellers and motors?

259
00:12:51.110 --> 00:12:53.480
That again, is going to depend
on how much you want to lift.

260
00:12:53.480 --> 00:12:55.760
Again, in the requirements specification.

261
00:12:55.760 --> 00:12:56.900
Do we need GPS?

262
00:12:56.900 --> 00:12:58.620
That depends on what
the specifications says.

263
00:12:58.620 --> 00:13:00.310
If the requirement specification says,

264
00:13:00.310 --> 00:13:02.220
we need to go from this
point to that point and

265
00:13:02.220 --> 00:13:06.660
you know where those locations are then
maybe you need GPS to find those, right.

266
00:13:06.660 --> 00:13:08.850
What type of transmitter
receiver do you want to use?

267
00:13:08.850 --> 00:13:12.470
Well, a big issue with transmitter
receiver is going to be the range, right.

268
00:13:12.470 --> 00:13:15.070
So the type that you buy is
going to determine how far,

269
00:13:15.070 --> 00:13:17.150
what range you can get in your remote.

270
00:13:17.150 --> 00:13:19.280
And that's gotta be stated
in the specification.

271
00:13:19.280 --> 00:13:21.540
We need it to work within one kilometer or
something like that.

272
00:13:22.540 --> 00:13:27.530
So these are common system level design
decisions that you have to make.

273
00:13:27.530 --> 00:13:30.362
And then, based on the constraints
which is stated in the requirement

274
00:13:30.362 --> 00:13:32.430
specifications so
I need to lift this much weight.

275
00:13:32.430 --> 00:13:34.130
I need to go from point A to point B.

276
00:13:34.130 --> 00:13:36.660
I need to have this much range in
my transmitter, this type of thing.

277
00:13:38.015 --> 00:13:39.220
No programming at this stage.

278
00:13:39.220 --> 00:13:42.240
So that's detail design,
actually writing the code.

279
00:13:42.240 --> 00:13:43.950
We're going to call that,
we'll do that later,

280
00:13:43.950 --> 00:13:47.110
right now you just want to look at
these options and evaluate them.

281
00:13:47.110 --> 00:13:51.750
No detailed wiring, but
the I/O pins are considered.

282
00:13:51.750 --> 00:13:55.370
So you do want to be able to
understand that you have enough

283
00:13:55.370 --> 00:13:57.918
pins in your devices to
communicate with each other, but

284
00:13:57.918 --> 00:13:59.540
we're not going to actually
do the detail wiring.

285
00:14:00.650 --> 00:14:05.180
So here's my sort of system block
diagram of my quadcopter, right.

286
00:14:05.180 --> 00:14:08.879
So you can look there, there's,
on the left, a RC transmitter,

287
00:14:08.879 --> 00:14:12.660
then there's on the right a RC
receiver which is on the quadcopter.

288
00:14:12.660 --> 00:14:14.472
Then that feeds to a flight controller,

289
00:14:14.472 --> 00:14:17.570
the flight controller connects
to four different ESCs.

290
00:14:17.570 --> 00:14:22.474
That stands for electronic speed control,
and each one of those ESCs drives a motor.

291
00:14:22.474 --> 00:14:23.910
Now, I haven't drawn everything in this.

292
00:14:23.910 --> 00:14:26.010
I should have drawn a battery and
other things.

293
00:14:26.010 --> 00:14:28.710
But you get the idea that
you have the main block.

294
00:14:28.710 --> 00:14:31.160
I should have drawn the battery actually,
that would have been useful.

295
00:14:31.160 --> 00:14:34.100
But the main control,
this shows the control flow.

296
00:14:34.100 --> 00:14:37.280
The battery's the power but
the control flow is shown in this picture.

297
00:14:37.280 --> 00:14:41.963
So when you do your system level design, a
block diagram like this is really useful.

298
00:14:41.963 --> 00:14:45.303
You almost have to have a block diagram
like this in your system design and

299
00:14:45.303 --> 00:14:49.100
you can have a diagram like this for
every option, every design option.

300
00:14:49.100 --> 00:14:51.880
Now, two design options might
share the same block diagram,

301
00:14:51.880 --> 00:14:54.430
in which case you don't have to redraw it,
but

302
00:14:54.430 --> 00:14:58.810
you do want this type of thing that shows
you interconnect, basic interconnect.

303
00:14:58.810 --> 00:15:01.580
It shows you the components,
shows you the basic interconnect, but

304
00:15:01.580 --> 00:15:03.505
it doesn't show
the detailed interconnects.

305
00:15:03.505 --> 00:15:06.419
So there's a line from receiver
to flight controller, but

306
00:15:06.419 --> 00:15:09.518
I don't say exactly what the names
of the pins are or anything.

307
00:15:09.518 --> 00:15:11.770
I just say look, they're connected.

308
00:15:11.770 --> 00:15:12.466
Thank you.

309
00:15:12.466 --> 00:15:16.715
[MUSIC]