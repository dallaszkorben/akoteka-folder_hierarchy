WEBVTT

1
00:00:12.000 --> 00:00:14.220
In the last lecture,

2
00:00:14.220 --> 00:00:16.410
we discovered some shocking news.

3
00:00:16.410 --> 00:00:18.285
It appears that there is

4
00:00:18.285 --> 00:00:22.440
a physical limit for
the current computing technology.

5
00:00:22.440 --> 00:00:25.500
At some point, we will
not be able to construct

6
00:00:25.500 --> 00:00:28.080
a smaller transistors
and the growth of

7
00:00:28.080 --> 00:00:31.155
our computing power
will eventually stop.

8
00:00:31.155 --> 00:00:34.585
This along can distress
us, but there's more.

9
00:00:34.585 --> 00:00:37.435
I already mentioned
the word universality.

10
00:00:37.435 --> 00:00:40.505
Now, it's time to dig
a little bit deeper,

11
00:00:40.505 --> 00:00:44.735
understand what does it mean.

12
00:00:44.735 --> 00:00:47.750
To do that, we first need to define

13
00:00:47.750 --> 00:00:50.435
what is the goal of computation.

14
00:00:50.435 --> 00:00:53.255
Computation transforms information.

15
00:00:53.255 --> 00:00:55.295
That's true. But why?

16
00:00:55.295 --> 00:01:02.395
Can we give a general answer
to this question? Yes, we can.

17
00:01:02.395 --> 00:01:05.110
If you reflect a bit

18
00:01:05.110 --> 00:01:07.790
on any computation you ever
performed in your life,

19
00:01:07.790 --> 00:01:09.665
you will probably agree that

20
00:01:09.665 --> 00:01:13.445
you computed the value
of some function.

21
00:01:13.445 --> 00:01:16.010
Again, it is just another way of

22
00:01:16.010 --> 00:01:18.845
saying that computation transforms

23
00:01:18.845 --> 00:01:22.430
information because it
maps some input data to

24
00:01:22.430 --> 00:01:26.190
some output data and
so does any function.

25
00:01:26.190 --> 00:01:30.070
So, why do I need this
another definition?

26
00:01:30.070 --> 00:01:34.670
Why do I need to employ
this notion of function?

27
00:01:34.670 --> 00:01:39.620
Because functions have
a strict mathematical definition.

28
00:01:39.620 --> 00:01:41.745
I can define, for example,

29
00:01:41.745 --> 00:01:48.374
the whole set of functions which
transform natural numbers,

30
00:01:48.374 --> 00:01:52.630
map actual numbers to one bit.

31
00:01:53.060 --> 00:01:55.770
This set is infinite,

32
00:01:55.770 --> 00:01:57.690
but it is well defined.

33
00:01:57.690 --> 00:02:00.910
Now, I can ask myself,

34
00:02:00.910 --> 00:02:05.815
if I can compute any
of these functions.

35
00:02:05.815 --> 00:02:08.230
For this question to be correct,

36
00:02:08.230 --> 00:02:10.160
I have to define first what does it

37
00:02:10.160 --> 00:02:12.785
mean that I can compute a function.

38
00:02:12.785 --> 00:02:16.505
For example, for a function f,

39
00:02:16.505 --> 00:02:21.415
I can compute it that if for any x,

40
00:02:21.415 --> 00:02:29.010
natural x, I can compute f of x,

41
00:02:29.010 --> 00:02:32.200
but there's an infinite number
of such inputs.

42
00:02:32.200 --> 00:02:38.140
So, how can I be sure that I
can do that for any of them?

43
00:02:38.140 --> 00:02:44.540
I can be sure if I have an algorithm
for computing this function.

44
00:02:48.110 --> 00:02:53.530
But again, I just explained
one clear thing through another.

45
00:02:53.530 --> 00:02:55.660
What is algorithm?

46
00:02:56.690 --> 00:02:59.200
The answer to this question was

47
00:02:59.200 --> 00:03:03.420
given by the English mathematician,

48
00:03:03.420 --> 00:03:09.525
English scientist, Alan Turing
in his PhD thesis in 1936.

49
00:03:09.525 --> 00:03:12.990
Algorithm is deterministic
Turing machine.

50
00:03:12.990 --> 00:03:15.140
Before that definition, there was

51
00:03:15.140 --> 00:03:17.225
some understanding that algorithm

52
00:03:17.225 --> 00:03:21.605
is something which works
for any input data,

53
00:03:21.605 --> 00:03:24.815
it has infinite number of steps

54
00:03:24.815 --> 00:03:29.375
and it requires no thinking effort.

55
00:03:29.375 --> 00:03:34.585
But Turing gave us
this strict mathematical definition.

56
00:03:34.585 --> 00:03:37.500
So, algorithm is
deterministic Turing machine,

57
00:03:37.500 --> 00:03:40.860
DTM and it is as you
probably remember,

58
00:03:40.860 --> 00:03:45.274
is infinite tape market into
squares and infinite alphabet,

59
00:03:45.274 --> 00:03:47.405
symbols of which can be written on

60
00:03:47.405 --> 00:03:52.100
these squares and
read-write tape which

61
00:03:52.100 --> 00:03:55.790
can read and write
one symbol at time on

62
00:03:55.790 --> 00:03:59.650
each step and
infinite number of states,

63
00:03:59.650 --> 00:04:03.470
including the initial state
and final states

64
00:04:03.470 --> 00:04:07.070
and infinite number of

65
00:04:07.070 --> 00:04:11.780
rules which control the behavior
of this abstract model.

66
00:04:11.780 --> 00:04:15.420
So now, algorithm is

67
00:04:15.420 --> 00:04:21.820
a finite tuple of finite set
and sets elements.

68
00:04:22.730 --> 00:04:26.480
This is a very powerful model
because it allows

69
00:04:26.480 --> 00:04:29.940
us to define the
universal Turing machine,

70
00:04:29.940 --> 00:04:32.910
which is the deterministic
Turing machine,

71
00:04:32.910 --> 00:04:36.050
which accepts another
Turing machine as it's

72
00:04:36.050 --> 00:04:39.560
simple and emulates it's behavior.

73
00:04:39.560 --> 00:04:43.325
So, this universal
Turing machine can do

74
00:04:43.325 --> 00:04:48.790
anything that any other
deterministic Turing machine can do.

75
00:04:48.790 --> 00:04:52.710
There are the time in 1936,

76
00:04:52.710 --> 00:04:55.470
a hypothesis was from weighted

77
00:04:55.470 --> 00:04:58.530
which is now known as
Church-Turing Thesis,

78
00:04:58.530 --> 00:05:00.350
which states that there is

79
00:05:00.350 --> 00:05:04.070
no other deterministic
computing device if

80
00:05:04.070 --> 00:05:06.720
the report are larger than that of

81
00:05:06.720 --> 00:05:11.480
deterministic of
the universal Turing machine.

82
00:05:13.260 --> 00:05:16.910
So now, this question,

83
00:05:16.910 --> 00:05:21.315
if we return to the question
of computability,

84
00:05:21.315 --> 00:05:24.315
now this question
about these functions,

85
00:05:24.315 --> 00:05:28.570
which transform
natural numbers to one bit.

86
00:05:30.440 --> 00:05:34.035
Now, this question makes sense.

87
00:05:34.035 --> 00:05:37.035
We can ask ourselves,

88
00:05:37.035 --> 00:05:41.280
if all these functions are

89
00:05:41.280 --> 00:05:48.110
computable and we can try
to reply to this question.

90
00:05:48.110 --> 00:05:51.010
So, are they computable?

91
00:05:51.010 --> 00:05:54.480
Because for any function
to be computable,

92
00:05:54.480 --> 00:05:56.410
now it means that there is

93
00:05:56.410 --> 00:06:01.300
a deterministic Turing machine
which computes this function.

94
00:06:01.430 --> 00:06:04.990
To answer this question, we first,

95
00:06:05.360 --> 00:06:14.895
we'll count how many deterministic
Turing machines are up there.

96
00:06:14.895 --> 00:06:18.435
Of course, it is an infinite set,

97
00:06:18.435 --> 00:06:26.530
but we are going to find out which
is the cardinality of this set.

98
00:06:26.530 --> 00:06:29.900
Since any deterministic
Turing machine is

99
00:06:29.900 --> 00:06:34.055
a finite tuple of
finite sets and elements,

100
00:06:34.055 --> 00:06:38.135
it can be encoded as a finite
string in some alphabet.

101
00:06:38.135 --> 00:06:41.795
For example, in the alphabet
of ones and zeros.

102
00:06:41.795 --> 00:06:44.690
So, any deterministic Turing machine,

103
00:06:44.690 --> 00:06:51.290
we can represent like this.

104
00:06:51.290 --> 00:06:55.920
Some finished string
of zeros and ones.

105
00:06:56.800 --> 00:07:05.525
Any of such strings can be
mapped to two natural numbers.

106
00:07:05.525 --> 00:07:10.415
First is the number of
leading zeros and the

107
00:07:10.415 --> 00:07:12.800
second is the number represented by

108
00:07:12.800 --> 00:07:16.680
this string in binary encoding.

109
00:07:17.990 --> 00:07:22.610
This set is countable, so now,

110
00:07:22.610 --> 00:07:24.335
we can conclude that we have

111
00:07:24.335 --> 00:07:29.210
only a countable infinity of
deterministic Turing machines.

112
00:07:29.210 --> 00:07:34.805
Sounds good. Now, let's
compute how many functions

113
00:07:34.805 --> 00:07:42.870
of this type are there.

114
00:07:43.220 --> 00:07:47.525
To do this, we are going to
define the following procedure.

115
00:07:47.525 --> 00:07:50.975
I will take some
function from this set.

116
00:07:50.975 --> 00:07:54.180
For this function, I am
going to write a string,

117
00:07:54.180 --> 00:07:56.300
again of ones and zeros.

118
00:07:56.300 --> 00:07:59.280
I'm going to write one,

119
00:07:59.280 --> 00:08:01.820
zero, then there's no comma.

120
00:08:01.820 --> 00:08:05.535
Then, I'm going to write one bit,

121
00:08:05.535 --> 00:08:07.560
which is f of one.

122
00:08:07.560 --> 00:08:10.365
The next bit is f of two,

123
00:08:10.365 --> 00:08:16.270
f of three, etc., up to infinity.

124
00:08:16.430 --> 00:08:25.770
This infinite string of ones and
zeros represents some real number

125
00:08:26.390 --> 00:08:37.235
on the interval from zero to
one and different functions

126
00:08:37.235 --> 00:08:42.055
map to different numbers
from this interval and

127
00:08:42.055 --> 00:08:45.160
different numbers from
this interval defined

128
00:08:45.160 --> 00:08:49.010
in this way, different functions.

129
00:08:49.010 --> 00:08:55.050
We perfectly know that there
are continuum of such numbers,

130
00:08:55.050 --> 00:09:02.045
of real numbers on
the interval zero, one.

131
00:09:02.045 --> 00:09:09.905
So, there is continuum of these
different functions of this step,

132
00:09:09.905 --> 00:09:14.950
which means that there are
uncomputable functions.

133
00:09:14.950 --> 00:09:24.995
Even more if we take a function
from this set at random,

134
00:09:24.995 --> 00:09:30.185
then the probability of the event
we can compute it is zero.

135
00:09:30.185 --> 00:09:32.840
We can compute almost nothing in

136
00:09:32.840 --> 00:09:36.510
this mysterious and beautiful world.

137
00:09:37.130 --> 00:09:40.650
Okay. Maybe it's not so bad.

138
00:09:40.650 --> 00:09:45.710
Maybe all these uncomputable
functions are bizarre and useless.

139
00:09:45.710 --> 00:09:49.345
It appears to be not true.

140
00:09:49.345 --> 00:09:51.480
In the same paper where

141
00:09:51.480 --> 00:09:54.290
Turing defined this
deterministic Turing machine,

142
00:09:54.290 --> 00:09:58.895
he provided us an example
of a very useful function,

143
00:09:58.895 --> 00:10:02.640
which is uncomputable
and this example is

144
00:10:02.640 --> 00:10:06.975
now known as the halting problem.

145
00:10:06.975 --> 00:10:10.995
Mention a function, for
example, we'll call it H,

146
00:10:10.995 --> 00:10:16.410
which the deterministic
Turing machine,

147
00:10:16.410 --> 00:10:20.020
some algorithms as its input

148
00:10:20.020 --> 00:10:25.260
and the input for
this deterministic Turing machine.

149
00:10:25.260 --> 00:10:31.620
This function returns zero

150
00:10:31.620 --> 00:10:37.205
if this machine will stop,

151
00:10:37.205 --> 00:10:39.470
will eventually stop on
this inputs at some point

152
00:10:39.470 --> 00:10:42.870
of time and provide us some result.

153
00:10:44.260 --> 00:10:51.595
It returns one if this Turing
machine hangs on this input.

154
00:10:51.595 --> 00:10:53.690
So, for this input,

155
00:10:53.690 --> 00:10:57.480
it has some infinite loop.

156
00:10:58.490 --> 00:11:00.945
So, this function H,

157
00:11:00.945 --> 00:11:08.250
it analyzes in some way
the machine on its input and

158
00:11:08.250 --> 00:11:11.165
gives us an answer if it has

159
00:11:11.165 --> 00:11:16.715
an infinite loop for this
particular input or if it does not.

160
00:11:16.715 --> 00:11:20.450
Turing proved and this
is a quite an easy proof

161
00:11:20.450 --> 00:11:24.580
that this function H is uncomputable.

162
00:11:24.580 --> 00:11:26.490
So, it means that

163
00:11:26.490 --> 00:11:29.210
deterministic Turing machines cannot

164
00:11:29.210 --> 00:11:31.865
analyze deterministic
Turing machines.

165
00:11:31.865 --> 00:11:36.140
If Church-Turing thesis is correct,

166
00:11:36.140 --> 00:11:39.265
then we're deterministic
Turing machines and

167
00:11:39.265 --> 00:11:43.985
we are not able to analyze
every computer program,

168
00:11:43.985 --> 00:11:46.685
which means that there can exist,

169
00:11:46.685 --> 00:11:49.740
can be written a computer program

170
00:11:49.740 --> 00:11:52.490
which we will not be
able to understand or

171
00:11:52.490 --> 00:11:54.815
to predict its behavior

172
00:11:54.815 --> 00:11:58.685
at deterministic computing
computer program.

173
00:11:58.685 --> 00:12:01.420
Isn't that amazing?